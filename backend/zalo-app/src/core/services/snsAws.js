const { SNSClient, PublishCommand } = require("@aws-sdk/client-sns");
const { generateOTP } = require('../utils/otp');
const redisClient = require('../config/redis');

// Kh·ªüi t·∫°o SNS client
const snsClient = new SNSClient({
    region: process.env.AWS_REGION || 'ap-southeast-1',
    credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    }
});

// Format s·ªë ƒëi·ªán tho·∫°i
const formatPhoneNumber = (phone) => {
    // X√≥a t·∫•t c·∫£ kho·∫£ng tr·∫Øng v√† d·∫•u +
    phone = phone.replace(/\s+/g, '').replace('+', '');
    
    // N·∫øu s·ªë b·∫Øt ƒë·∫ßu b·∫±ng 0, thay th·∫ø b·∫±ng 84
    if (phone.startsWith('0')) {
        phone = '84' + phone.substring(1);
    }
    
    // N·∫øu s·ªë ch∆∞a c√≥ 84 ·ªü ƒë·∫ßu, th√™m v√†o
    if (!phone.startsWith('84')) {
        phone = '84' + phone;
    }
    
    // Log ƒë·ªÉ debug
    console.log('S·ªë ƒëi·ªán tho·∫°i sau khi format:', '+' + phone);
    
    // Tr·∫£ v·ªÅ s·ªë v·ªõi d·∫•u + ·ªü ƒë·∫ßu
    return '+' + phone;
};

// G·ª≠i OTP qua SMS
const sendOTP = async (phone) => {
    try {
        // T·∫°o m√£ OTP
        const otp = generateOTP();
        console.log('\n=== DEVELOPMENT MODE ===');
        console.log('üì± S·ªë ƒëi·ªán tho·∫°i:', phone);
        console.log('üîë M√£ OTP:', otp);
        console.log('=====================\n');
        
        // Format s·ªë ƒëi·ªán tho·∫°i
        const formattedPhone = formatPhoneNumber(phone);

        // L∆∞u OTP v√†o Redis
        console.log('ƒêang l∆∞u OTP v√†o Redis...');
        await redisClient.set(`otp:${phone}`, otp, 'EX', 300); // H·∫øt h·∫°n sau 5 ph√∫t
        console.log('ƒê√£ l∆∞u OTP v√†o Redis th√†nh c√¥ng');

        /* Comment ph·∫ßn g·ª≠i AWS SNS trong qu√° tr√¨nh ph√°t tri·ªÉn
        // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
        if (formattedPhone !== '+84376963653') {
            console.error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp v·ªõi s·ªë ƒë√£ verified:', formattedPhone);
            throw new Error('S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒë∆∞·ª£c verified trong AWS SNS Sandbox');
        }

        // Chu·∫©n b·ªã tin nh·∫Øn v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
        const message = `[ZaloLite] M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otp}\n\nM√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.\nVui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, xin h√£y b·ªè qua tin nh·∫Øn.`;
        
        // G·ª≠i SMS qua AWS SNS
        console.log('ƒêang g·ª≠i SMS qua AWS SNS...');
        const command = new PublishCommand({
            Message: message,
            PhoneNumber: formattedPhone,
            MessageAttributes: {
                'AWS.SNS.SMS.SMSType': {
                    DataType: 'String',
                    StringValue: 'Transactional'
                },
                'AWS.SNS.SMS.SenderID': {
                    DataType: 'String',
                    StringValue: 'ZaloLite'
                }
            }
        });

        const response = await snsClient.send(command);
        console.log('ƒê√£ g·ª≠i SMS th√†nh c√¥ng. Message ID:', response.MessageId);
        */
        
        return true;
    } catch (error) {
        console.error('L·ªói khi g·ª≠i OTP:', error);
        throw new Error(error.message || 'G·ª≠i OTP th·∫•t b·∫°i');
    }
};

// X√°c th·ª±c OTP
const verifyOTP = async (phone, inputOTP) => {
    try {
        console.log('ƒêang x√°c th·ª±c OTP cho s·ªë ƒëi·ªán tho·∫°i:', phone);
        console.log('M√£ OTP nh·∫≠p v√†o:', inputOTP);

        // L·∫•y OTP t·ª´ Redis
        console.log('ƒêang l·∫•y OTP t·ª´ Redis...');
        const storedOTP = await redisClient.get(`otp:${phone}`);
        console.log('M√£ OTP l∆∞u trong Redis:', storedOTP);

        if (!storedOTP) {
            console.log('Kh√¥ng t√¨m th·∫•y m√£ OTP cho s·ªë ƒëi·ªán tho·∫°i n√†y');
            return false;
        }

        // So s√°nh OTP
        const isValid = inputOTP === storedOTP;
        console.log('K·∫øt qu·∫£ x√°c th·ª±c OTP:', isValid ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i');

        if (isValid) {
            // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
            console.log('ƒêang x√≥a OTP kh·ªèi Redis...');
            await redisClient.del(`otp:${phone}`);
            console.log('ƒê√£ x√≥a OTP th√†nh c√¥ng');
        }

        return isValid;
    } catch (error) {
        console.error('L·ªói khi x√°c th·ª±c OTP:', error);
        throw new Error('X√°c th·ª±c OTP th·∫•t b·∫°i');
    }
};

module.exports = {
    sendOTP,
    verifyOTP
};